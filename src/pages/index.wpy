<template>
  <view wx:if="{{authorize&&isReady}}" class="container">
    <!-- banner -->
    <swiper
      indicator-dots="{{indicatorDots}}"
      indicator-color="#0882ff"
      indicator-active-color="#fff"
      autoplay="{{autoplay}}"
      interval="{{interval}}"
      duration="{{duration}}"
    >
      <repeat for="{{imgUrls}}" key="index" index="index" item="item" style="width:100%; height:100%;">
        <swiper-item style="width:100%; height:100%;">
          <image src="{{item.imageUrl}}" bindtap="BannerClick" data-path="{{item.url}}" class="slide-image" style="width:100%; height:100%;" />
        </swiper-item>
      </repeat>
    </swiper>
    <!-- 关联结构 -->
    <view class="btm" wx:if="{{!isBind}}">
      <view class="txt1">暂未关联孩子账号</view>
      <view class="txt2">关联孩子账号随时了解孩子的学习情况</view>
      <view class="btn" @tap="showBindingPage"> 关联孩子的悠数学账号 </view>
    </view>
    <!-- 已关联展示home结构 -->
    <view class="content" wx:if="{{isBind}}">
      <!-- 作业报告部分 -->
      <view class="report" bindtap="readReport">
        <view class="head">作业报告</view>
        <view wx:if="{{idxData.homework}}" class="near">近期作业：《{{idxData.homework.name}}》</view>
        <view wx:if="{{!idxData.homework}}" class="near">近期作业：暂无作业</view>
        <view class="read">查看</view>
      </view>
      <!-- VIP培优服务 -->
      <view class="vip">
        <view class="vipHead">VIP培优服务<image src="../static/vip.png" /></view>
        <!-- 监控 -->
        <view class="monitor" bindtap="toMonitor" wx:if="{{!isVip}}">
          <view class="left">监控学习情况，有问题立即提醒</view>
          <view class="right">了解详情<image src="../static/right-arrow.png" /></view>
        </view>
        <!-- vip没有报警 -->
        <view class="monitor notHaveTip" bindtap="toMonitor" wx:if="{{isVip&&!idxData.smartRemind}}">
          <view class="left">
            <image src="../static/notHaveTip.gif" />
            <view>正在监控中...学习情况正常</view>
          </view>
        </view>
        <!-- vip有报警 -->
        <view class="monitor HaveTip" bindtap="toMonitor" wx:if="{{isVip&&idxData.smartRemind}}">
          <view class="left">
            <image src="../static/HaveTip.png" />
            <view>有{{idxData.remindCount}}条异常警报：作业[{{idxData.smartRemind.homeworkName}}]正...</view>
          </view>
        </view>

        <!-- 学习动态  -->
        <view wx:if="{{isVip}}" class="base learnState" bindtap="toState">
          <view class="topH">学习动态<image wx:if="{{idxData.learnDynamic&&idxData.learnDynamic.clickStatus=='ENABLED'}}" src="../static/new.png" /></view>
          <view class="txt" wx:if="{{idxData.learnDynamic}}">{{dynamic.time}} {{dynamic.title}}</view>
          <view class="txt" wx:if="{{!idxData.learnDynamic}}">暂无学习动态</view>
        </view>
        <!-- 非vip的示例学习动态 -->
        <view wx:if="{{!isVip}}" class="base learnState" bindtap="toState">
          <view class="topH eg">学习动态<image src="../static/egMg.png" /></view>
          <view class="txt">5-26 15:30 开始自主练习</view>
        </view>
        <!-- 学情分析 -->
        <view class="base learnAnalysis" bindtap="toAnalysis">
          <view class="topH">学情分析<image src="" /></view>
          <view wx:if="{{idxData.weekReport}}" class="txt">{{idxData.weekReport.startDate}} ~ {{idxData.weekReport.endDate}} 周成绩报告</view>
          <view wx:if="{{!idxData.weekReport}}" class="txt">暂无成绩报告</view>
        </view>
      </view>

    </view>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import moment from 'moment'
  import mta from '../utils/mta_analysis.js'
  export default class Index extends wepy.page {
    config = {
      navigationBarTitleText: '悠数学-家长'
    }
    components = {}

    data = {
      isBind: true, // 是否绑定孩子
      isReady: false,  // 身份时候判断成功
      isVip: true, // 是否是vip
      newShow: true, // 学习动态
      dynamic: {}, // 学习动态对象
      idxData: {
        homework: '', // 作业报告
        remindCount: 0,  // 提醒数量
        weekReport: '',  // 学情分析
        smartRemind: '',  // 智能提醒
        learnDynamic: '',  // 学习动态
        isVip: false    // 是否是会员
      },
      imgUrls: [],
      indicatorDots: true,
      autoplay: true,
      interval: 6000,
      duration: 500
    }

    computed = {
      authorize() {
        if (this.$parent.globalData.authorize) {
          return true
        } else {
          return false
        }
      }
    }

    methods = {
      showBindingPage () {
        wx.navigateTo({
          url: '/pages/child-input'
        })
      },
      readReport() {
        // 跳转报告页
        wx.navigateTo({
          url: '/pages/work-report'
        })
      },
      toState() {
        // 跳转学习动态页面
        if (this.isVip) {
          wepy.navigateTo({
            url: '/pages/join-trend'
          })
        } else {
          wepy.navigateTo({
            url: '/pages/not-join-trend'
          })
        }
      },
      BannerClick(e) {
        let pathUrl = e.currentTarget.dataset.path
        if (pathUrl === '/pages/vip-learn-club' || pathUrl === 'pages/index' || pathUrl === '/pages/user') {
          wepy.switchTab({
            url: pathUrl
          })
        } else if (pathUrl.indexOf('/pages') === -1) {
          wepy.navigateTo({
            url: '/pages/web-view?url=' + pathUrl
          })
        } else {
          console.log(0)
          wepy.navigateTo({
            url: pathUrl
          })
        }
      },

      toAnalysis() {
        // 跳转学情分析页面
        console.log('跳转学情分析页面')
        wepy.navigateTo({
          url: '/pages/analysis'
        })
      },
      toMonitor() {
        // 跳转警告页
        console.log('跳转警告页')
        wepy.navigateTo({
          url: `/pages/warn`
        })
      }
    }

    getDataIdx() {
      let _this = this
      wx.request({
        url: `${this.$parent.globalData.baseURL}/wx/micro/parent/index`,
        method: 'POST',
        header: {
          'Content-Type': 'application/x-www-form-urlencoded',
          'S_T': wx.getStorageSync('token')
        },
        success (res) {
          if (res.data.ret_code === 0) {
            // console.log(res.data.ret)
            _this.idxData = res.data.ret
            // 学习动态
            if (_this.idxData.learnDynamic) {
              _this.dynamic = _this.typeQsc(_this.idxData.learnDynamic)
            }
            // 学情报告时间处理
            if (_this.idxData.weekReport && _this.idxData.weekReport.endDate) {
              _this.idxData.weekReport.endDate = _this.timestampToTime(_this.idxData.weekReport.endDate, 'date')
            }
            if (_this.idxData.weekReport && _this.idxData.weekReport.startDate) {
              _this.idxData.weekReport.startDate = _this.timestampToTime(_this.idxData.weekReport.startDate, 'date')
            }
            // banner数据赋值
            if (res.data.ret.banners && res.data.ret.banners.length) {
              _this.imgUrls = res.data.ret.banners
              for (let i = 0; i < _this.imgUrls.length; i++) {
                _this.imgUrls[i].imageUrl = _this.$parent.globalData.baseURL + _this.imgUrls[i].imageUrl
              }
            }
            _this.$apply()
          } else {
            console.log(res)
          }
        },
        fail (res) {
          console.log('app.wpy --> _checkToken --> fail')
        }
      })
    }

    onShareAppMessage (res) {
      // if (res.from === 'button') {
      //   // 来自页面内转发按钮
      //   console.log(res.target)
      // }
      return {
        title: '悠数学|家长端 随时关注孩子的学习情况',
        path: '/pages/index',
        imageUrl: 'http://qnstatic.file.yoomath.com/parent/home.png'
      }
    }

    events = {}

    _getAuthorize () {
      return new Promise((resolve, reject) => {
        wx.getSetting({
          success (res) {
            console.log('app.wpy --> _getAuthorize --> success')
            console.log(res)
            if (res.authSetting['scope.userInfo']) {
              resolve(true)
            } else {
              resolve(false)
            }
          }
        })
      })
    }

    onLoad() {
      mta.Page.init()
    }

    // 应该用redux获取状态，再发起请求，整个项目都不应该这样乱写，可惜他们要求赶时间，完全不看代码质量，
    _getInfo () {
      let _this = this
      setTimeout(() => {
        if (_this.$parent.globalData.isCheck) {
          // 后台查看是否关联过孩子,isBind变为true
          let token = wx.getStorageSync('token')
          if (token) {
            // 查看是否绑定孩子
            wx.request({
              url: `${_this.$parent.globalData.baseURL}/wx/micro/parent/hasBind`,
              method: 'POST',
              header: {
                'Content-Type': 'application/x-www-form-urlencoded',
                'S_T': token
              },
              success (res) {
                console.log('index.wpy')
                console.log(res)
                if (res.data.ret_code === 0) {
                  _this.isBind = res.data.ret.hasBind
                  _this.isReady = true
                  _this.$apply()
                  _this.getDataIdx()
                  // }
                } else {
                  // console.log(res)
                }
              },
              fail (res) {
                console.log('/wx/micro/parent/hasBind ---> fail')
              }
            })
            // 查看用户是否是vip
            wx.request({
              url: `${_this.$parent.globalData.baseURL}/wx/parent/getUserInfo`,
              method: 'POST',
              header: {
                'Content-Type': 'application/x-www-form-urlencoded',
                'S_T': token
              },
              success (res) {
                console.log('index.wpy')
                console.log(res)
                if (res.data.ret_code === 0) {
                  if (res.data.ret.userMember.memberType === 'VIP' || res.data.ret.userMember.memberType === 'SCHOOL_VIP') {
                    _this.isVip = true
                  } else {
                    _this.isVip = false
                  }
                  _this.$apply()
                } else {
                  // console.log(res)
                }
              },
              fail (res) {
                console.log('/wx/micro/parent/hasBind ---> fail')
              }
            })
          }
        } else {
          this._getInfo()
        }
      }, 500)
    }

    async onShow() {
      console.log('index.wpy --> onShow')
      let authorize = await this._getAuthorize()
      if (!authorize) {
        wx.redirectTo({
          url: `/pages/authorizeIdx?to=/pages/index`
        })
        return
      }
      // let _this = this
      this._getInfo()
      // while (!this.$parent.globalData.isCheck) {
      //   console.log('**************************')
      //   await this.sleep(0.1)
      // }

      // await this.sleep(5)
      // setTimeout(() => {
      // 后台查看是否关联过孩子,isBind变为true
      // let token = wx.getStorageSync('token')
      // if (token) {
      //   // 查看是否绑定孩子
      //   wx.request({
      //     url: `${this.$parent.globalData.baseURL}/wx/micro/parent/hasBind`,
      //     method: 'POST',
      //     header: {
      //       'Content-Type': 'application/x-www-form-urlencoded',
      //       'S_T': token
      //     },
      //     success (res) {
      //       console.log('index.wpy')
      //       console.log(res)
      //       if (res.data.ret_code === 0) {
      //         _this.isBind = res.data.ret.hasBind
      //         _this.isReady = true
      //         _this.$apply()
      //         // _this.setData({'isBind': res.data.ret.hasBind})
      //         // 获取首页数据
      //         // if (_this.isBind) {
      //         _this.getDataIdx()
      //         // }
      //       } else {
      //         // console.log(res)
      //       }
      //     },
      //     fail (res) {
      //       console.log('/wx/micro/parent/hasBind ---> fail')
      //     }
      //   })
      //   // 查看用户是否是vip
      //   wx.request({
      //     url: `${this.$parent.globalData.baseURL}/wx/parent/getUserInfo`,
      //     method: 'POST',
      //     header: {
      //       'Content-Type': 'application/x-www-form-urlencoded',
      //       'S_T': token
      //     },
      //     success (res) {
      //       console.log('index.wpy')
      //       console.log(res)
      //       if (res.data.ret_code === 0) {
      //         if (res.data.ret.userMember.memberType === 'VIP' || res.data.ret.userMember.memberType === 'SCHOOL_VIP') {
      //           _this.isVip = true
      //         } else {
      //           _this.isVip = false
      //         }
      //         _this.$apply()
      //       } else {
      //         // console.log(res)
      //       }
      //     },
      //     fail (res) {
      //       console.log('/wx/micro/parent/hasBind ---> fail')
      //     }
      //   })
      // }
      // }, 1000)
    }

    // 时间处理函数
    timestampToTime(timestamp, date) {
      // 1529928850000 //26号
      let timeTep = timestamp
      let timeGet = moment(timeTep).format('YYYY-MM-DD-HH:mm').split('-')
      let timeNow = moment(moment()).format('YYYY-MM-DD-HH:mm').split('-')
      if ((timeGet[0] === timeNow[0]) && (timeGet[1] === timeNow[1]) && (timeGet[2] === timeNow[2])) {
        if (date === 'date') {
          return moment(timeTep).format('MM/DD')
        } else {
          return moment(timeTep).format('MM/DD HH:mm')
        }
      }
      if ((timeGet[0] === timeNow[0]) && (timeGet[1] === timeNow[1]) && (timeGet[2] - timeNow[2] === 1)) {
        if (date === 'date') {
          return moment(timeTep).format('MM/DD')
        } else {
          return moment(timeTep).format('MM/DD HH:mm')
        }
      }
      if (timeGet[0] === timeNow[0]) {
        if (date === 'date') {
          return moment(timeTep).format('MM/DD')
        } else {
          return moment(timeTep).format('MM/DD HH:mm')
        }
      }
      if (timeGet[0] !== timeNow[0]) {
        if (date === 'date') {
          return moment(timeTep).format('YYYY/MM/DD')
        } else {
          return moment(timeTep).format('YYYY/MM/DD HH:mm')
        }
      }
    }

    // 类型封装
    typeQsc(i) {
      let detail = {}
      // 智能出卷
      if (i.type === 'SMART_EXAM_PAPER') {
        if (i.status === 'START') {
          detail['time'] = this.timestampToTime(i.startAt, '1')
          detail['type'] = `exercise`
          detail['title'] = `开始自主练习「智能出卷」`
        } else if (i.status === 'EXIT') {
          detail['time'] = this.timestampToTime(i.startAt, '1')
          detail['type'] = `exercise`
          detail['title'] = `开始自主练习「智能出卷」`

          detail['time'] = this.timestampToTime(i.endAt, '1')
          detail['type'] = `exit`
          detail['title'] = `退出自主练习「智能出卷」`
          if (~~(i.doTime / 60)) {
            detail['subTitle'] = `用时${~~(i.doTime / 60)}分${i.doTime % 60 || 0}秒；完成${i.completeQuestionCount}道题目练习`
          } else {
            detail['subTitle'] = `用时${i.doTime || 0}秒；完成${i.completeQuestionCount}道题目练习`
          }
        } else if (i.status === 'COMMIT') {
          detail['time'] = this.timestampToTime(i.startAt, '1')
          detail['type'] = `exercise`
          detail['title'] = `开始自主练习「智能出卷」`

          detail['time'] = this.timestampToTime(i.endAt, '1')
          detail['type'] = `complete`
          detail['title'] = `提交自主练习「智能出卷」`
          detail['subTitle'] = `用时${~~(i.doTime / 60)}分${i.doTime % 60 || 0}秒；完成${i.completeQuestionCount}道题目练习`
        }
      // 每日练
      } else if (i.type === 'DAILY_PRACTISE') {
        if (i.status === 'START') {
          detail['time'] = this.timestampToTime(i.startAt, '1')
          detail['type'] = `exercise`
          detail['title'] = `开始自主练习「每日练」`
        } else if (i.status === 'EXIT') {
          detail['time'] = this.timestampToTime(i.startAt, '1')
          detail['type'] = `exercise`
          detail['title'] = `开始自主练习「每日练」`

          detail['time'] = this.timestampToTime(i.endAt, '1')
          detail['type'] = `exit`
          detail['title'] = `退出自主练习「每日练」`
          if (~~(i.doTime / 60)) {
            detail['subTitle'] = `用时${~~(i.doTime / 60)}分${i.doTime % 60 || 0}秒；完成${i.completeQuestionCount}道题目练习`
          } else {
            detail['subTitle'] = `用时${i.doTime || 0}秒；完成${i.completeQuestionCount}道题目练习`
          }
        } else if (i.status === 'COMMIT') {
          detail['time'] = this.timestampToTime(i.startAt, '1')
          detail['type'] = `exercise`
          detail['title'] = `开始自主练习「每日练」`

          detail['time'] = this.timestampToTime(i.endAt, '1')
          detail['type'] = `complete`
          detail['title'] = `提交自主练习「每日练」`
          if (~~(i.doTime / 60)) {
            detail['subTitle'] = `用时${~~(i.doTime / 60)}分${i.doTime % 60 || 0}秒；完成${i.completeQuestionCount}道题目练习`
          } else {
            detail['subTitle'] = `用时${i.doTime || 0}秒；完成${i.completeQuestionCount}道题目练习`
          }
        }
      // 错题练习
      } else if (i.type === 'FALLIBLE_PRACTISE') {
        if (i.status === 'START') {
          detail['time'] = this.timestampToTime(i.startAt, '1')
          detail['type'] = `exercise`
          detail['title'] = `开始自主练习「错题练习」`
        } else if (i.status === 'EXIT') {
          detail['time'] = this.timestampToTime(i.startAt, '1')
          detail['type'] = `exercise`
          detail['title'] = `开始自主练习「错题练习」`

          detail['time'] = this.timestampToTime(i.endAt, '1')
          detail['type'] = `exit`
          detail['title'] = `退出自主练习「错题练习」`
          if (~~(i.doTime / 60)) {
            detail['subTitle'] = `用时${~~(i.doTime / 60)}分${i.doTime % 60 || 0}秒；完成${i.completeQuestionCount}道题目练习`
          } else {
            detail['subTitle'] = `用时${i.doTime || 0}秒；完成${i.completeQuestionCount}道题目练习`
          }
        } else if (i.status === 'COMMIT') {
          detail['time'] = this.timestampToTime(i.startAt, '1')
          detail['type'] = `exercise`
          detail['title'] = `开始自主练习「错题练习」`

          detail['time'] = this.timestampToTime(i.endAt, '1')
          detail['type'] = `complete`
          detail['title'] = `提交自主练习「错题练习」`
          if (~~(i.doTime / 60)) {
            detail['subTitle'] = `用时${~~(i.doTime / 60)}分${i.doTime % 60 || 0}秒；完成${i.completeQuestionCount}道题目练习`
          } else {
            detail['subTitle'] = `用时${i.doTime || 0}秒；完成${i.completeQuestionCount}道题目练习`
          }
        }
      // 章节练习
      } else if (i.type === 'SECTION_PRACTISE') {
        if (i.status === 'START') {
          detail['time'] = this.timestampToTime(i.startAt, '1')
          detail['type'] = `exercise`
          detail['title'] = `开始自主练习「章节练习」`
        } else if (i.status === 'EXIT') {
          detail['time'] = this.timestampToTime(i.startAt, '1')
          detail['type'] = `exercise`
          detail['title'] = `开始自主练习「章节练习」`

          detail['time'] = this.timestampToTime(i.endAt, '1')
          detail['type'] = `exit`
          detail['title'] = `退出自主练习「章节练习」`
          if (~~(i.doTime / 60)) {
            detail['subTitle'] = `用时${~~(i.doTime / 60)}分${i.doTime % 60 || 0}秒；完成${i.completeQuestionCount}道题目练习`
          } else {
            detail['subTitle'] = `用时${i.doTime || 0}秒；完成${i.completeQuestionCount}道题目练习`
          }
        } else if (i.status === 'COMMIT') {
          detail['time'] = this.timestampToTime(i.startAt, '1')
          detail['type'] = `exercise`
          detail['title'] = `开始自主练习「章节练习」`

          detail['time'] = this.timestampToTime(i.endAt, '1')
          detail['type'] = `complete`
          detail['title'] = `提交自主练习「章节练习」`
          if (~~(i.doTime / 60)) {
            detail['subTitle'] = `用时${~~(i.doTime / 60)}分${i.doTime % 60 || 0}秒；完成${i.completeQuestionCount}道题目练习`
          } else {
            detail['subTitle'] = `用时${i.doTime || 0}秒；完成${i.completeQuestionCount}道题目练习`
          }
        }
      // 教辅练习
      } else if (i.type === 'TEACH_PRACTISE') {
        if (i.status === 'START') {
          detail['time'] = this.timestampToTime(i.startAt, '1')
          detail['type'] = `exercise`
          detail['title'] = `开始教辅练习「${i.name}」`
        } else if (i.status === 'EXIT') {
          detail['time'] = this.timestampToTime(i.startAt, '1')
          detail['type'] = `exercise`
          detail['title'] = `开始教辅练习「${i.name}」`

          detail['time'] = this.timestampToTime(i.endAt, '1')
          detail['type'] = `exit`
          detail['title'] = `退出教辅练习「${i.name}」`
          if (~~(i.doTime / 60)) {
            detail['subTitle'] = `用时${~~(i.doTime / 60)}分${i.doTime % 60 || 0}秒；完成${i.completeQuestionCount}道题目练习`
          } else {
            detail['subTitle'] = `用时${i.doTime || 0}秒；完成${i.completeQuestionCount}道题目练习`
          }
        } else if (i.status === 'COMMIT') {
          detail['time'] = this.timestampToTime(i.startAt, '1')
          detail['type'] = `exercise`
          detail['title'] = `开始教辅练习「${i.name}」`

          detail['time'] = this.timestampToTime(i.endAt, '1')
          detail['type'] = `complete`
          detail['title'] = `提交教辅练习「${i.name}」`
          if (~~(i.doTime / 60)) {
            detail['subTitle'] = `用时${~~(i.doTime / 60)}分${i.doTime % 60 || 0}秒；完成${i.completeQuestionCount}道题目练习`
          } else {
            detail['subTitle'] = `用时${i.doTime || 0}秒；完成${i.completeQuestionCount}道题目练习`
          }
        }
      // 做作业
      } else if (i.type === 'HOMEWORK') {
        if (i.status === 'START') {
          detail['time'] = this.timestampToTime(i.startAt, '1')
          detail['type'] = `homework`
          detail['title'] = `做作业「${i.name}」`
        } else if (i.status === 'EXIT') {
          detail['time'] = this.timestampToTime(i.startAt, '1')
          detail['type'] = `homework`
          detail['title'] = `做作业「${i.name}」`

          detail['time'] = this.timestampToTime(i.endAt, '1')
          detail['type'] = `exit`
          detail['title'] = `退出作答`
          if (~~(i.doTime / 60)) {
            detail['subTitle'] = `用时${~~(i.doTime / 60)}分${i.doTime % 60 || 0}秒`
          } else {
            detail['subTitle'] = `用时${i.doTime || 0}秒`
          }
        } else if (i.status === 'COMMIT') {
          detail['time'] = this.timestampToTime(i.startAt, '1')
          detail['type'] = `homework`
          detail['title'] = `做作业「${i.name}」`

          detail['time'] = this.timestampToTime(i.endAt, '1')
          detail['type'] = `complete`
          detail['title'] = `提交作业`
          if (~~(i.doTime / 60)) {
            detail['subTitle'] = `用时${~~(i.doTime / 60)}分${i.doTime % 60 || 0}秒`
          } else {
            detail['subTitle'] = `用时${i.doTime || 0}秒`
          }
        }
      // 作业错题订正
      } else if (i.type === 'HOMEWORK_CORRECT') {
        detail['time'] = this.timestampToTime(i.startAt)
        detail['type'] = `revisal`
        detail['title'] = `作业错题订正「${i.name}」`
        detail['subTitle'] = `完成${i.completeQuestionCount}道题目订正`
      // 练习错题订正
      } else if (i.type === 'PRACTISE_CORRECT') {
        detail['time'] = moment(i.startAt).format('HH:mm')
        detail['type'] = `revisal`
        detail['title'] = `练习错题订正「${i.name}」`
        detail['subTitle'] = `完成${i.completeQuestionCount}道题目订正`
      // 错题针对性练习
      } else if (i.type === 'TARGET_FALLIBLE_PRACTISE') {
        if (i.status === 'START') {
          detail['time'] = this.timestampToTime(i.startAt, '1')
          detail['type'] = `exercise`
          detail['title'] = `开始错题针对性练习「${i.name}」`
        } else if (i.status === 'EXIT') {
          detail['time'] = this.timestampToTime(i.startAt, '1')
          detail['type'] = `exercise`
          detail['title'] = `开始错题针对性练习「${i.name}」`

          detail['time'] = this.timestampToTime(i.endAt, '1')
          detail['type'] = `exit`
          detail['title'] = `退出错题针对性练习`
          detail['subTitle'] = `用时${~~(i.doTime / 60)}分${i.doTime % 60 || 0}秒；完成${i.completeQuestionCount}道题目练习`
        } else if (i.status === 'COMMIT') {
          detail['time'] = this.timestampToTime(i.startAt, '1')
          detail['type'] = `exercise`
          detail['title'] = `开始错题针对性练习「${i.name}」`

          detail['time'] = this.timestampToTime(i.endAt, '1')
          detail['type'] = `exit`
          detail['title'] = `提交错题针对性练习`
          detail['subTitle'] = `用时${~~(i.doTime / 60)}分${i.doTime % 60 || 0}秒；完成${i.completeQuestionCount}道题目练习`
        }
      // 薄弱知识点针对性练习
      } else if (i.type === 'WEAK_POINT') {
        if (i.status === 'START') {
          detail['time'] = this.timestampToTime(i.startAt, '1')
          detail['type'] = `exercise`
          detail['title'] = `开始薄弱知识点针对性练习「${i.name}」`
        } else if (i.status === 'EXIT') {
          detail['time'] = this.timestampToTime(i.startAt, '1')
          detail['type'] = `exercise`
          detail['title'] = `开始薄弱知识点针对性练习「${i.name}」`

          detail['time'] = this.timestampToTime(i.endAt, '1')
          detail['type'] = `exit`
          detail['title'] = `退出薄弱知识点针对性练习`
          if (~~(i.doTime / 60)) {
            detail['subTitle'] = `用时${~~(i.doTime / 60)}分${i.doTime % 60 || 0}秒；完成${i.completeQuestionCount}道题目练习`
          } else {
            detail['subTitle'] = `用时${i.doTime || 0}秒；完成${i.completeQuestionCount}道题目练习`
          }
        } else if (i.status === 'COMMIT') {
          detail['time'] = this.timestampToTime(i.startAt, '1')
          detail['type'] = `exercise`
          detail['title'] = `开始薄弱知识点针对性练习「${i.name}」`

          detail['time'] = this.timestampToTime(i.endAt, '1')
          detail['type'] = `exit`
          detail['title'] = `提交薄弱知识点针对性练习`
          if (~~(i.doTime / 60)) {
            detail['subTitle'] = `用时${~~(i.doTime / 60)}分${i.doTime % 60 || 0}秒；完成${i.completeQuestionCount}道题目练习`
          } else {
            detail['subTitle'] = `用时${i.doTime || 0}秒；完成${i.completeQuestionCount}道题目练习`
          }
        }
      }

      return detail
    }
  }
</script>

<style lang="less">
  .container{
    width: 100%;
    height: auto;
  }
  swiper{
    height:230rpx;
    width:690rpx;
    margin: 30rpx auto;
    image{
      border-radius: 10rpx;
    }
  }
  
  // home相关结构
  .content{
    width: 690rpx;
    margin: 0 auto;
    height: auto;
    .report{
      width: 100%;
      height: 160rpx;
      position: relative;
      border-bottom: 1rpx solid #cce4ff;
      .head{
        position: absolute;
        top: 15rpx;
        left: 0;
        font-size: 40rpx;
        font-weight: 900;
      }
      .near{
        width:75%;
        overflow: hidden;
        white-space: nowrap;
        text-overflow: ellipsis;
        font-size: 30rpx;
        color: #999999;
        position: absolute;
        bottom: 30rpx;
        left: 0;
      }
      .read{
        position: absolute;
        top: 30rpx;
        right: 0;
        width: 160rpx;
        height: 60rpx;
        color: #007AFF;
        background: #cce4ff;
        border-radius: 30rpx;
        text-align: center;
        line-height: 60rpx;
        font-size: 30rpx;
      }
    }
    .vip{
      width: 100%;
      height: auto;
      .vipHead{
        margin-top: 40rpx; 
        font-size: 38rpx;
        font-weight: 900;
        image{
          width: 60rpx;
          height: 32rpx;
          margin-left: 20rpx;
        }
      }
      .monitor{
        display: flex;
        justify-content: space-between;
        font-size: 30rpx;
        padding: 0 30rpx;
        height: 80rpx;
        line-height: 80rpx;
        margin-top: 30rpx;
        background: #B2D7FD;
        border-radius: 10rpx;
        .left{
          color: #007AFF;
        }
        .right{
          color: #007AFF;
          image{
            width: 15rpx;
            height: 25rpx;
            vertical-align: middle;
            margin-top: -4rpx;
            padding-left: 20rpx;
          }
        }

      }
      .notHaveTip{
        background: #60CAA1;
        .left{
          color: #ffffff;
          display: flex;
          view{
            width: 600rpx;
            overflow: hidden;
            text-overflow:ellipsis;
            white-space: nowrap;
          }
          image{
             width: 32rpx;
            height: 32rpx;
            // vertical-align: middle;
            margin-right: 15rpx;
            margin-top: 24rpx;
            display: block;
          }
        }
      }
      .HaveTip{
        background: #F14B40;
        .left{
          color: #ffffff;
          display: flex;
          view{
            width: 600rpx;
            overflow: hidden;
            text-overflow:ellipsis;
            white-space: nowrap;
          }
          image{
             width: 32rpx;
            height: 32rpx;
            // vertical-align: middle;
            margin-right: 15rpx;
            margin-top: 24rpx;
            display: block;
          }
        }
      }
      .base{
        width: 100%;
        min-height: 160rpx;
        margin-top: 30rpx;
        border-radius: 10rpx;
        .topH{
          font-size: 40rpx;
          font-weight: 900;
          padding: 24rpx 30rpx;
          padding-bottom: 18rpx;
          image{
            width: 80rpx;
            height: 30rpx;
            margin-left: 15rpx;
          }
        }
        .eg{
          image{
            width: 120rpx;
          }
        }
        .txt{
          padding: 0 30rpx;
          font-size: 30rpx;
          width: 600rpx;
          overflow: hidden;
          text-overflow:ellipsis;
          white-space: nowrap;
        }
      }
      .learnState{
        background: #FFE288;
        .txt{
          color: #BA9A37;
        }
      }
      .learnAnalysis{
        background: #8DE6FF;
        .txt{
          color: #3B9CB7;
        }
      }
    }

  }
  // 关联结构
  .btm{
    width: 690rpx;
    height: auto;
    margin: 0 auto;
    margin-top: 200rpx;
    .txt1{
      width: 100%;
      text-align: center;
      font-size: 36rpx;
      height: 70rpx;
      font-weight: 900;
    }
    .txt2{
      width: 100%;
      text-align: center;
      font-size: 30rpx;
      height: 70rpx;
    }
    .btn{
      background: #007AFF;
      color: #ffffff;
      font-size: 32rpx;
      font-weight: 900;
      height: 90rpx;
      text-align: center;
      line-height: 90rpx;
      border-radius: 10rpx;
    }
  }
</style>
