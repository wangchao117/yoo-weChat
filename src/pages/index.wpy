<template>
  <!-- <view wx:if="{{authorize&&isReady}}" class="container"> -->
  <view class="container" wx:if="{{isReady}}">
    <!-- 加入自己小程序提示 -->
    <view class="joinTip" wx:if="{{tipNow}}">
      <view class="Str">添加到【我的小程序】，微信首页下拉打开，使用更方便</view>
      <image class="zhi" src="../static/figer.gif" />
      <image @tap="delTip" class="todel" src="../static/tipdel.png" />
      <!-- 授权按钮 -->
      <button wx:if="{{!authorize}}" class="btn1" open-type="getUserInfo" lang="zh_CN" @getuserinfo="onGotUserInfo('Home_ToBind')"></button>
      <!-- 绑定孩子按钮 -->
      <!-- <view @tap="showBindingPage('Home_ToBind')" wx:if="{{authorize&&!hasBind}}" class="btn1"></view> -->
    </view>
    <!-- banner -->
    <swiper
      indicator-dots="{{indicatorDots}}"
      indicator-color="#0882ff"
      indicator-active-color="#fff"
      autoplay="{{autoplay}}"
      interval="{{interval}}"
      duration="{{duration}}"
    >
      <repeat for="{{imgUrls}}" key="index" index="index" item="item" style="width:100%; height:100%;">
        <swiper-item style="width:100%; height:100%;">
          <image src="{{item.imageUrl}}" @tap="BannerClick({{item}}, {{index}})" data-path="{{item.url}}" class="slide-image" style="width:100%; height:100%;" />
        </swiper-item>
      </repeat>
    </swiper>
    <!-- 已关联展示home结构 -->
    <view class="content">
      <!-- 作业报告部分 -->
      <view class="report">
        <view class="reWrap"  @tap="readReport">
          <view class="head">作业报告</view>
          <view wx:if="{{idxData.homework}}" class="near">近期作业：《{{idxData.homework.name}}》</view>
          <view wx:if="{{!idxData.homework}}" class="near">近期作业：暂无作业</view>
          <view class="read">查看</view>
        </view>
        <!-- 授权按钮 -->
        <button wx:if="{{!authorize}}" class="btn2" open-type="getUserInfo" lang="zh_CN" @getuserinfo="onGotUserInfo('Home_Report_Unbound')"></button>
        <!-- 绑定孩子按钮 -->
        <view @tap="showBindingPage('Home_Report_Unbound')" wx:if="{{authorize&&!hasBind}}" class="btn2"></view>
      </view>
      <!-- VIP培优服务 -->
      <view class="vip">
        <view class="vipHead">VIP培优服务<image src="../static/vip.png" /></view>

        <!-- 监控 -->
        <view class="monitor" wx:if="{{!isVip || !hasBind}}">
          <view class="left" @tap="toMonitor">监控学习情况，有问题立即提醒</view>
          <view class="right" @tap="toMonitor">了解详情<image src="../static/right-arrow.png" /></view>
          <!-- 授权按钮 -->
          <button wx:if="{{!authorize}}" class="btn2" open-type="getUserInfo" lang="zh_CN" @getuserinfo="onGotUserInfo('Home_Remind_Unbound')"></button>
          <!-- 绑定孩子按钮 -->
          <view @tap="showBindingPage('Home_Remind_Unbound')" wx:if="{{authorize&&!hasBind}}" class="btn2"></view>
        </view>

        <!-- vip没有报警 -->
        <view class="monitor notHaveTip" wx:if="{{isVip&&!idxData.smartRemind&&hasBind}}">
          <view class="left" @tap="toMonitor">
            <image src="../static/notHaveTip.gif" />
            <view>正在监控中...学习情况正常</view>
          </view>
          <!-- 授权按钮 -->
          <button wx:if="{{!authorize}}" class="btn2" open-type="getUserInfo" lang="zh_CN" @getuserinfo="onGotUserInfo('Home_Remind_Unbound')"></button>
          <!-- 绑定孩子按钮 -->
          <view @tap="showBindingPage('Home_Remind_Unbound')" wx:if="{{authorize&&!hasBind}}" class="btn2"></view>
        </view>

        <!-- vip有报警 -->
        <view class="monitor HaveTip" wx:if="{{isVip&&idxData.smartRemind&&hasBind}}">
          <view class="left" @tap="toMonitor">
            <image src="../static/HaveTip.png" />
            <view>有{{idxData.remindCount}}条异常警报：作业[{{idxData.smartRemind.homeworkName}}]正...</view>
          </view>
          <!-- 授权按钮 -->
          <button wx:if="{{!authorize}}" class="btn2" open-type="getUserInfo" lang="zh_CN" @getuserinfo="onGotUserInfo('Home_Remind_Unbound')"></button>
          <!-- 绑定孩子按钮 -->
          <view @tap="showBindingPage('Home_Remind_Unbound')" wx:if="{{authorize&&!hasBind}}" class="btn2"></view>
        </view>

        <!-- 学习动态  -->
        <view wx:if="{{isVip}}" class="base learnState">
          <view class="topH" @tap="toState">学习动态<image wx:if="{{idxData.learnDynamic&&idxData.learnDynamic.clickStatus=='ENABLED'}}" src="../static/new.png" /></view>
          <view class="txt" @tap="toState" wx:if="{{idxData.learnDynamic}}">{{dynamic.time}} {{dynamic.title}}</view>
          <view class="txt" @tap="toState" wx:if="{{!idxData.learnDynamic}}">暂无学习动态</view>
          <!-- 授权按钮 -->
          <button wx:if="{{!authorize}}" class="btn2" open-type="getUserInfo" lang="zh_CN" @getuserinfo="onGotUserInfo('Home_Tend_Unbound')"></button>
          <!-- 绑定孩子按钮 -->
          <view @tap="showBindingPage('Home_Tend_Unbound')" wx:if="{{authorize&&!hasBind}}" class="btn2"></view>
        </view>

        <!-- 非vip的示例学习动态 -->
        <view wx:if="{{!isVip}}" class="base learnState">
          <view class="topH eg" @tap="toState">学习动态<image src="../static/egMg.png" /></view>
          <view class="txt" @tap="toState">5-26 15:30 开始自主练习</view>
          <!-- 授权按钮 -->
          <button wx:if="{{!authorize}}" class="btn2" open-type="getUserInfo" lang="zh_CN" @getuserinfo="onGotUserInfo('Home_Tend_Unbound')"></button>
          <!-- 绑定孩子按钮 -->
          <view @tap="showBindingPage('Home_Tend_Unbound')" wx:if="{{authorize&&!hasBind}}" class="btn2"></view>
        </view>

        <!-- 学情分析 -->
        <view class="base learnAnalysis">
          <view class="topH" @tap="toAnalysis">学情分析<image src="" /></view>
          <view wx:if="{{idxData.weekReport}}" @tap="toAnalysis" class="txt">{{idxData.weekReport.startDate}} ~ {{idxData.weekReport.endDate}} 周成绩报告</view>
          <view wx:if="{{!idxData.weekReport}}" @tap="toAnalysis" class="txt">暂无成绩报告</view>
          <!-- 授权按钮 -->
          <button wx:if="{{!authorize}}" class="btn2" open-type="getUserInfo" lang="zh_CN" @getuserinfo="onGotUserInfo('Home_Analysis_Unbound')"></button>
          <!-- 绑定孩子按钮 -->
          <view @tap="showBindingPage('Home_Analysis_Unbound')" wx:if="{{authorize&&!hasBind}}" class="btn2"></view>
        </view>
      </view>

    </view>
    <view wx:if="{{!hasBind}}" style="height: 170rpx;"></view>
    <view wx:if="{{!hasBind}}" class="btmTipImg">
      <image src="../static/btnBg.png" />
      <!-- 授权按钮 -->
      <button wx:if="{{!authorize}}" class="btn2" open-type="getUserInfo" lang="zh_CN" @getuserinfo="onGotUserInfo('Home_ToBind')"></button>
      <!-- 绑定孩子按钮 -->
      <view @tap="showBindingPage('Home_ToBind')" wx:if="{{authorize&&!hasBind}}" class="btn2"></view>
    </view>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import moment from 'moment'
  import mta from '../utils/mta_analysis.js'
  export default class Index extends wepy.page {
    config = {
      navigationBarTitleText: '悠数学-家长'
    }
    components = {}

    data = {
      hasBind: false, // 是否绑定孩子
      isReady: false,  // 身份是否判断成功
      isVip: false, // 是否是vip
      newShow: false, // 学习动态
      tipNow: true, // 是否展示上面的tip
      dynamic: {}, // 学习动态对象
      idxData: {
        homework: '', // 作业报告
        remindCount: 0,  // 提醒数量
        weekReport: '',  // 学情分析
        smartRemind: '',  // 智能提醒
        learnDynamic: '',  // 学习动态
        isVip: false    // 是否是会员
      },
      imgUrls: [],
      indicatorDots: true,
      autoplay: true,
      interval: 6000,
      duration: 500
    }

    computed = {
      authorize() {
        if (this.$parent.globalData.hasAuthorize) {
          return true
        } else {
          return false
        }
      }
    }

    methods = {
      showBindingPage (val) {
        mta.Event.stat(val)
        wx.navigateTo({
          url: '/pages/associated-account'
        })
      },
      readReport () {
        mta.Event.stat('Home_Report_Bind')
        // 跳转报告页
        wx.navigateTo({
          url: '/pages/work-report'
        })
      },
      toState () {
        mta.Event.stat('Home_Tend_Bind')
        // 跳转学习动态页面
        if (this.isVip) {
          wepy.navigateTo({
            url: '/pages/join-trend'
          })
        } else {
          wepy.navigateTo({
            url: '/pages/not-join-trend'
          })
        }
      },
      BannerClick (item, index) {
        // console.log(item, index)
        mta.Event.stat('Home_banner', {'index': index})
        let pathUrl = item.url
        // pathUrl = 'https://mp.weixin.qq.com/s?__biz=MzI5OTEyNjA2NQ==&mid=510326821&idx=1&sn=c59f437e0b7f54bcf536a7692371d946&chksm=7705047b40728d6d1952f2dfb209039e1d16c5ce68716521baff4bfc87b7c18f57622bd7d241#rd'
        if (pathUrl === '/pages/vip-learn-club' || pathUrl === 'pages/index' || pathUrl === '/pages/user') {
          console.log('index.wpy --> BannerClick --> switchTab --> ' + pathUrl)
          wepy.switchTab({
            url: pathUrl
          })
        } else if (pathUrl.indexOf('/pages') === -1) {
          console.log('index.wpy --> BannerClick --> navigateTo --> ' + pathUrl)
          this.$parent.globalData.webViewSrc = pathUrl
          wepy.navigateTo({
            url: '/pages/web-view'
          })
        } else {
          console.log('index.wpy --> BannerClick --> pathUrl --> ' + pathUrl)
          wepy.navigateTo({
            url: pathUrl
          })
        }
      },
      toAnalysis () {
        // 跳转学情分析页面
        console.log('跳转学情分析页面')
        mta.Event.stat('Home_Analysis_Bind')
        wepy.navigateTo({
          url: '/pages/analysis'
        })
      },
      toMonitor () {
        // 跳转警告页
        console.log('跳转警告页')
        mta.Event.stat('Home_Remind_Bind')
        wepy.navigateTo({
          url: `/pages/warn`
        })
      },
      delTip () {
        let _this = this
        wx.setStorage({
          key: 'tipNow',
          data: 'true',
          success: function () {
            _this.tipNow = false
            _this.$apply()
          }
        })
      },
      async onGotUserInfo (val) {
        mta.Event.stat(val)
        let _this = this
        let authorize = await this._getAuthorize()
        if (!authorize) {
          this.isReady = true
          this.$apply()
          return
        }
        this.$parent.globalData.hasAuthorize = authorize
        await this.$parent._login()
        _this._checkLogin()
      }
    }

    getDataIdx () {
      console.log('index.wepy--to --> getDataIdx')
      let _this = this
      wx.request({
        url: `${this.$parent.globalData.baseURL}/wx/micro/parent/index`,
        method: 'POST',
        header: {
          'Content-Type': 'application/x-www-form-urlencoded',
          'S_T': wx.getStorageSync('token')
        },
        success (res) {
          console.log('index.wpy --> getDataIdx --> success')
          console.log(res)
          if (res.data.ret_code === 0) {
            // console.log(res.data.ret)
            _this.idxData = res.data.ret
            // 学习动态
            if (_this.idxData.learnDynamic) {
              _this.dynamic = _this.typeQsc(_this.idxData.learnDynamic)
            }
            // 学情报告时间处理
            if (_this.idxData.weekReport && _this.idxData.weekReport.endDate) {
              _this.idxData.weekReport.endDate = _this.timestampToTime(_this.idxData.weekReport.endDate, 'date')
            }
            if (_this.idxData.weekReport && _this.idxData.weekReport.startDate) {
              _this.idxData.weekReport.startDate = _this.timestampToTime(_this.idxData.weekReport.startDate, 'date')
            }
            // banner数据赋值
            if (res.data.ret.banners && res.data.ret.banners.length) {
              _this.imgUrls = res.data.ret.banners
              for (let i = 0; i < _this.imgUrls.length; i++) {
                _this.imgUrls[i].imageUrl = _this.$parent.globalData.baseURL + _this.imgUrls[i].imageUrl
              }
            }
            _this.$apply()
          } else {
            // console.log(res)
          }
        },
        fail (res) {
          console.log('index.wpy --> getDataIdx --> fail')
          console.log(res)
        }
      })
    }

    _checkLogin () {
      console.log('index.wpy --> _checkLogin')
      let _this = this
      if (_this.$parent.globalData.hasCheckToken) {
        // 后台查看是否关联过孩子,hasBind变为true
        let token = wx.getStorageSync('token')
        if (token) {
          // 查看是否绑定孩子
          wx.request({
            url: `${_this.$parent.globalData.baseURL}/wx/micro/parent/hasBind`,
            method: 'POST',
            header: {
              'Content-Type': 'application/x-www-form-urlencoded',
              'S_T': token
            },
            success (res) {
              console.log('index.wpy --> _checkLogin --> hasBind --> success')
              console.log(res)
              if (res.data.ret_code === 0) {
                _this.hasBind = res.data.ret.hasBind
                _this.isReady = true
                _this.$apply()
                _this.getDataIdx()
              } else {
                // console.log(res)
              }
            },
            fail (res) {
              console.log('index.wpy --> _checkLogin --> hasBind --> fail')
              console.log(res)
            }
          })
          // 查看用户是否是vip
          wx.request({
            url: `${_this.$parent.globalData.baseURL}/wx/parent/getUserInfo`,
            method: 'POST',
            header: {
              'Content-Type': 'application/x-www-form-urlencoded',
              'S_T': token
            },
            success (res) {
              console.log('index.wpy --> _checkLogin --> getUserInfo --> success')
              console.log(res)
              if (res.data.ret_code === 0) {
                if (res.data.ret.userMember.memberType === 'VIP' || res.data.ret.userMember.memberType === 'SCHOOL_VIP') {
                  _this.isVip = true
                } else {
                  _this.isVip = false
                }
                _this.$apply()
              } else {
                // console.log(res)
              }
            },
            fail (res) {
              console.log('index.wpy --> _checkLogin --> getUserInfo --> fail')
              console.log(res)
            }
          })
        }
      } else {
        setTimeout(() => {
          this._checkLogin()
        }, 100)
      }
    }

    _getAuthorize () {
      return new Promise((resolve, reject) => {
        wx.getSetting({
          success (res) {
            console.log('index.wpy --> _getAuthorize --> success')
            console.log(res)
            if (res.authSetting['scope.userInfo']) {
              resolve(true)
            } else {
              resolve(false)
            }
          }
        })
      })
    }

    // 时间处理函数
    timestampToTime(timestamp, date) {
      // 1529928850000 //26号
      let timeTep = timestamp
      let timeGet = moment(timeTep).format('YYYY-MM-DD-HH:mm').split('-')
      let timeNow = moment(moment()).format('YYYY-MM-DD-HH:mm').split('-')
      if ((timeGet[0] === timeNow[0]) && (timeGet[1] === timeNow[1]) && (timeGet[2] === timeNow[2])) {
        if (date === 'date') {
          return moment(timeTep).format('MM/DD')
        } else {
          return moment(timeTep).format('MM/DD HH:mm')
        }
      }
      if ((timeGet[0] === timeNow[0]) && (timeGet[1] === timeNow[1]) && (timeGet[2] - timeNow[2] === 1)) {
        if (date === 'date') {
          return moment(timeTep).format('MM/DD')
        } else {
          return moment(timeTep).format('MM/DD HH:mm')
        }
      }
      if (timeGet[0] === timeNow[0]) {
        if (date === 'date') {
          return moment(timeTep).format('MM/DD')
        } else {
          return moment(timeTep).format('MM/DD HH:mm')
        }
      }
      if (timeGet[0] !== timeNow[0]) {
        if (date === 'date') {
          return moment(timeTep).format('YYYY/MM/DD')
        } else {
          return moment(timeTep).format('YYYY/MM/DD HH:mm')
        }
      }
    }
    // 类型封装
    typeQsc(i) {
      let detail = {}
      // 智能出卷
      if (i.type === 'SMART_EXAM_PAPER') {
        if (i.status === 'START') {
          detail['time'] = this.timestampToTime(i.startAt, '1')
          detail['type'] = `exercise`
          detail['title'] = `开始自主练习「智能出卷」`
        } else if (i.status === 'EXIT') {
          detail['time'] = this.timestampToTime(i.startAt, '1')
          detail['type'] = `exercise`
          detail['title'] = `开始自主练习「智能出卷」`

          detail['time'] = this.timestampToTime(i.endAt, '1')
          detail['type'] = `exit`
          detail['title'] = `退出自主练习「智能出卷」`
          if (~~(i.doTime / 60)) {
            detail['subTitle'] = `用时${~~(i.doTime / 60)}分${i.doTime % 60 || 0}秒；完成${i.completeQuestionCount}道题目练习`
          } else {
            detail['subTitle'] = `用时${i.doTime || 0}秒；完成${i.completeQuestionCount}道题目练习`
          }
        } else if (i.status === 'COMMIT') {
          detail['time'] = this.timestampToTime(i.startAt, '1')
          detail['type'] = `exercise`
          detail['title'] = `开始自主练习「智能出卷」`

          detail['time'] = this.timestampToTime(i.endAt, '1')
          detail['type'] = `complete`
          detail['title'] = `提交自主练习「智能出卷」`
          detail['subTitle'] = `用时${~~(i.doTime / 60)}分${i.doTime % 60 || 0}秒；完成${i.completeQuestionCount}道题目练习`
        }
      // 每日练
      } else if (i.type === 'DAILY_PRACTISE') {
        if (i.status === 'START') {
          detail['time'] = this.timestampToTime(i.startAt, '1')
          detail['type'] = `exercise`
          detail['title'] = `开始自主练习「每日练」`
        } else if (i.status === 'EXIT') {
          detail['time'] = this.timestampToTime(i.startAt, '1')
          detail['type'] = `exercise`
          detail['title'] = `开始自主练习「每日练」`

          detail['time'] = this.timestampToTime(i.endAt, '1')
          detail['type'] = `exit`
          detail['title'] = `退出自主练习「每日练」`
          if (~~(i.doTime / 60)) {
            detail['subTitle'] = `用时${~~(i.doTime / 60)}分${i.doTime % 60 || 0}秒；完成${i.completeQuestionCount}道题目练习`
          } else {
            detail['subTitle'] = `用时${i.doTime || 0}秒；完成${i.completeQuestionCount}道题目练习`
          }
        } else if (i.status === 'COMMIT') {
          detail['time'] = this.timestampToTime(i.startAt, '1')
          detail['type'] = `exercise`
          detail['title'] = `开始自主练习「每日练」`

          detail['time'] = this.timestampToTime(i.endAt, '1')
          detail['type'] = `complete`
          detail['title'] = `提交自主练习「每日练」`
          if (~~(i.doTime / 60)) {
            detail['subTitle'] = `用时${~~(i.doTime / 60)}分${i.doTime % 60 || 0}秒；完成${i.completeQuestionCount}道题目练习`
          } else {
            detail['subTitle'] = `用时${i.doTime || 0}秒；完成${i.completeQuestionCount}道题目练习`
          }
        }
      // 错题练习
      } else if (i.type === 'FALLIBLE_PRACTISE') {
        if (i.status === 'START') {
          detail['time'] = this.timestampToTime(i.startAt, '1')
          detail['type'] = `exercise`
          detail['title'] = `开始自主练习「错题练习」`
        } else if (i.status === 'EXIT') {
          detail['time'] = this.timestampToTime(i.startAt, '1')
          detail['type'] = `exercise`
          detail['title'] = `开始自主练习「错题练习」`

          detail['time'] = this.timestampToTime(i.endAt, '1')
          detail['type'] = `exit`
          detail['title'] = `退出自主练习「错题练习」`
          if (~~(i.doTime / 60)) {
            detail['subTitle'] = `用时${~~(i.doTime / 60)}分${i.doTime % 60 || 0}秒；完成${i.completeQuestionCount}道题目练习`
          } else {
            detail['subTitle'] = `用时${i.doTime || 0}秒；完成${i.completeQuestionCount}道题目练习`
          }
        } else if (i.status === 'COMMIT') {
          detail['time'] = this.timestampToTime(i.startAt, '1')
          detail['type'] = `exercise`
          detail['title'] = `开始自主练习「错题练习」`

          detail['time'] = this.timestampToTime(i.endAt, '1')
          detail['type'] = `complete`
          detail['title'] = `提交自主练习「错题练习」`
          if (~~(i.doTime / 60)) {
            detail['subTitle'] = `用时${~~(i.doTime / 60)}分${i.doTime % 60 || 0}秒；完成${i.completeQuestionCount}道题目练习`
          } else {
            detail['subTitle'] = `用时${i.doTime || 0}秒；完成${i.completeQuestionCount}道题目练习`
          }
        }
      // 章节练习
      } else if (i.type === 'SECTION_PRACTISE') {
        if (i.status === 'START') {
          detail['time'] = this.timestampToTime(i.startAt, '1')
          detail['type'] = `exercise`
          detail['title'] = `开始自主练习「章节练习」`
        } else if (i.status === 'EXIT') {
          detail['time'] = this.timestampToTime(i.startAt, '1')
          detail['type'] = `exercise`
          detail['title'] = `开始自主练习「章节练习」`

          detail['time'] = this.timestampToTime(i.endAt, '1')
          detail['type'] = `exit`
          detail['title'] = `退出自主练习「章节练习」`
          if (~~(i.doTime / 60)) {
            detail['subTitle'] = `用时${~~(i.doTime / 60)}分${i.doTime % 60 || 0}秒；完成${i.completeQuestionCount}道题目练习`
          } else {
            detail['subTitle'] = `用时${i.doTime || 0}秒；完成${i.completeQuestionCount}道题目练习`
          }
        } else if (i.status === 'COMMIT') {
          detail['time'] = this.timestampToTime(i.startAt, '1')
          detail['type'] = `exercise`
          detail['title'] = `开始自主练习「章节练习」`

          detail['time'] = this.timestampToTime(i.endAt, '1')
          detail['type'] = `complete`
          detail['title'] = `提交自主练习「章节练习」`
          if (~~(i.doTime / 60)) {
            detail['subTitle'] = `用时${~~(i.doTime / 60)}分${i.doTime % 60 || 0}秒；完成${i.completeQuestionCount}道题目练习`
          } else {
            detail['subTitle'] = `用时${i.doTime || 0}秒；完成${i.completeQuestionCount}道题目练习`
          }
        }
      // 教辅练习
      } else if (i.type === 'TEACH_PRACTISE') {
        if (i.status === 'START') {
          detail['time'] = this.timestampToTime(i.startAt, '1')
          detail['type'] = `exercise`
          detail['title'] = `开始教辅练习「${i.name}」`
        } else if (i.status === 'EXIT') {
          detail['time'] = this.timestampToTime(i.startAt, '1')
          detail['type'] = `exercise`
          detail['title'] = `开始教辅练习「${i.name}」`

          detail['time'] = this.timestampToTime(i.endAt, '1')
          detail['type'] = `exit`
          detail['title'] = `退出教辅练习「${i.name}」`
          if (~~(i.doTime / 60)) {
            detail['subTitle'] = `用时${~~(i.doTime / 60)}分${i.doTime % 60 || 0}秒；完成${i.completeQuestionCount}道题目练习`
          } else {
            detail['subTitle'] = `用时${i.doTime || 0}秒；完成${i.completeQuestionCount}道题目练习`
          }
        } else if (i.status === 'COMMIT') {
          detail['time'] = this.timestampToTime(i.startAt, '1')
          detail['type'] = `exercise`
          detail['title'] = `开始教辅练习「${i.name}」`

          detail['time'] = this.timestampToTime(i.endAt, '1')
          detail['type'] = `complete`
          detail['title'] = `提交教辅练习「${i.name}」`
          if (~~(i.doTime / 60)) {
            detail['subTitle'] = `用时${~~(i.doTime / 60)}分${i.doTime % 60 || 0}秒；完成${i.completeQuestionCount}道题目练习`
          } else {
            detail['subTitle'] = `用时${i.doTime || 0}秒；完成${i.completeQuestionCount}道题目练习`
          }
        }
      // 做作业
      } else if (i.type === 'HOMEWORK') {
        if (i.status === 'START') {
          detail['time'] = this.timestampToTime(i.startAt, '1')
          detail['type'] = `homework`
          detail['title'] = `做作业「${i.name}」`
        } else if (i.status === 'EXIT') {
          detail['time'] = this.timestampToTime(i.startAt, '1')
          detail['type'] = `homework`
          detail['title'] = `做作业「${i.name}」`

          detail['time'] = this.timestampToTime(i.endAt, '1')
          detail['type'] = `exit`
          detail['title'] = `退出作答`
          if (~~(i.doTime / 60)) {
            detail['subTitle'] = `用时${~~(i.doTime / 60)}分${i.doTime % 60 || 0}秒`
          } else {
            detail['subTitle'] = `用时${i.doTime || 0}秒`
          }
        } else if (i.status === 'COMMIT') {
          detail['time'] = this.timestampToTime(i.startAt, '1')
          detail['type'] = `homework`
          detail['title'] = `做作业「${i.name}」`

          detail['time'] = this.timestampToTime(i.endAt, '1')
          detail['type'] = `complete`
          detail['title'] = `提交作业`
          if (~~(i.doTime / 60)) {
            detail['subTitle'] = `用时${~~(i.doTime / 60)}分${i.doTime % 60 || 0}秒`
          } else {
            detail['subTitle'] = `用时${i.doTime || 0}秒`
          }
        }
      // 作业错题订正
      } else if (i.type === 'HOMEWORK_CORRECT') {
        detail['time'] = this.timestampToTime(i.startAt)
        detail['type'] = `revisal`
        detail['title'] = `作业错题订正「${i.name}」`
        detail['subTitle'] = `完成${i.completeQuestionCount}道题目订正`
      // 练习错题订正
      } else if (i.type === 'PRACTISE_CORRECT') {
        detail['time'] = moment(i.startAt).format('HH:mm')
        detail['type'] = `revisal`
        detail['title'] = `练习错题订正「${i.name}」`
        detail['subTitle'] = `完成${i.completeQuestionCount}道题目订正`
      // 错题针对性练习
      } else if (i.type === 'TARGET_FALLIBLE_PRACTISE') {
        if (i.status === 'START') {
          detail['time'] = this.timestampToTime(i.startAt, '1')
          detail['type'] = `exercise`
          detail['title'] = `开始错题针对性练习「${i.name}」`
        } else if (i.status === 'EXIT') {
          detail['time'] = this.timestampToTime(i.startAt, '1')
          detail['type'] = `exercise`
          detail['title'] = `开始错题针对性练习「${i.name}」`

          detail['time'] = this.timestampToTime(i.endAt, '1')
          detail['type'] = `exit`
          detail['title'] = `退出错题针对性练习`
          detail['subTitle'] = `用时${~~(i.doTime / 60)}分${i.doTime % 60 || 0}秒；完成${i.completeQuestionCount}道题目练习`
        } else if (i.status === 'COMMIT') {
          detail['time'] = this.timestampToTime(i.startAt, '1')
          detail['type'] = `exercise`
          detail['title'] = `开始错题针对性练习「${i.name}」`

          detail['time'] = this.timestampToTime(i.endAt, '1')
          detail['type'] = `exit`
          detail['title'] = `提交错题针对性练习`
          detail['subTitle'] = `用时${~~(i.doTime / 60)}分${i.doTime % 60 || 0}秒；完成${i.completeQuestionCount}道题目练习`
        }
      // 薄弱知识点针对性练习
      } else if (i.type === 'WEAK_POINT') {
        if (i.status === 'START') {
          detail['time'] = this.timestampToTime(i.startAt, '1')
          detail['type'] = `exercise`
          detail['title'] = `开始薄弱知识点针对性练习「${i.name}」`
        } else if (i.status === 'EXIT') {
          detail['time'] = this.timestampToTime(i.startAt, '1')
          detail['type'] = `exercise`
          detail['title'] = `开始薄弱知识点针对性练习「${i.name}」`

          detail['time'] = this.timestampToTime(i.endAt, '1')
          detail['type'] = `exit`
          detail['title'] = `退出薄弱知识点针对性练习`
          if (~~(i.doTime / 60)) {
            detail['subTitle'] = `用时${~~(i.doTime / 60)}分${i.doTime % 60 || 0}秒；完成${i.completeQuestionCount}道题目练习`
          } else {
            detail['subTitle'] = `用时${i.doTime || 0}秒；完成${i.completeQuestionCount}道题目练习`
          }
        } else if (i.status === 'COMMIT') {
          detail['time'] = this.timestampToTime(i.startAt, '1')
          detail['type'] = `exercise`
          detail['title'] = `开始薄弱知识点针对性练习「${i.name}」`

          detail['time'] = this.timestampToTime(i.endAt, '1')
          detail['type'] = `exit`
          detail['title'] = `提交薄弱知识点针对性练习`
          if (~~(i.doTime / 60)) {
            detail['subTitle'] = `用时${~~(i.doTime / 60)}分${i.doTime % 60 || 0}秒；完成${i.completeQuestionCount}道题目练习`
          } else {
            detail['subTitle'] = `用时${i.doTime || 0}秒；完成${i.completeQuestionCount}道题目练习`
          }
        }
      }
      return detail
    }

    events = {}

    onShareAppMessage (res) {
      return {
        title: '悠数学|家长端 随时关注孩子的学习情况',
        path: '/pages/index',
        imageUrl: 'http://qnstatic.file.yoomath.com/parent/home.png'
      }
    }

    onLoad() {
      let _this = this
      console.log('index.wpy --> onLoad')
      mta.Page.init()
      // 是否展示tip
      wx.getStorage({
        key: 'tipNow',
        success: function(res) {
          console.log(res.data)
          if (res.data) {
            _this.tipNow = false
            _this.$apply()
          }
        }
      })
    }

    async onShow() {
      console.log('index.wpy --> onShow')
      let authorize = await this._getAuthorize()
      if (!authorize) {
        this.isReady = true
        this.imgUrls[0] = {'imageUrl': '../static/authIdx.png', 'url': '/pages/vip-learn-club'}
        this.$apply()
        return
      }
      this._checkLogin()
    }
  }
</script>

<style lang="less">
  .container{
    width: 100%;
    height: auto;
    margin-bottom: 30rpx;
  }
  .joinTip{
    background: #FFE288;
    display: flex;
    width: 100%;
    position: relative;
    view{
      width: 560rpx;
      padding: 20rpx 38rpx;
      line-height: 40rpx;
      font-size: 30rpx;
      color: #000000; 
      padding-right: 0;
    }
    .zhi{
      display: block;
      width: 72rpx;
      height: 72rpx;
      padding-top: 20rpx;
      margin-left: 16rpx;
    }
    .todel{
      display: block;
      width: 32rpx;
      height: 32rpx;
      padding: 40rpx;
      padding-left: 50rpx;
    }
    .btn1{
      position: absolute;
      top: 0;
      right: 0;
      width: 110rpx;
      height: 110rpx;
      opacity: 0;
    }

  }
  swiper{
    height:230rpx;
    width:690rpx;
    margin: 30rpx auto;
    image{
      border-radius: 10rpx;
    }
  }
  
  // home相关结构
  .content{
    width: 690rpx;
    margin: 0 auto;
    height: auto;
    .report{
      width: 100%;
      height: 160rpx;
      position: relative;
      border-bottom: 1rpx solid #cce4ff;
      .reWrap{
        width: 100%;
        height: 160rpx;
        .head{
          position: absolute;
          top: 15rpx;
          left: 0;
          font-size: 40rpx;
          font-weight: 900;
        }
        .near{
          width:75%;
          overflow: hidden;
          white-space: nowrap;
          text-overflow: ellipsis;
          font-size: 30rpx;
          color: #999999;
          position: absolute;
          bottom: 30rpx;
          left: 0;
        }
        .read{
          position: absolute;
          top: 30rpx;
          right: 0;
          width: 160rpx;
          height: 60rpx;
          color: #007AFF;
          background: #cce4ff;
          border-radius: 30rpx;
          text-align: center;
          line-height: 60rpx;
          font-size: 30rpx;
        }
      }
      .btn2{
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        opacity: 0;
      }
    }
    .vip{
      width: 100%;
      height: auto;
      .vipHead{
        margin-top: 40rpx; 
        font-size: 38rpx;
        font-weight: 900;
        image{
          width: 60rpx;
          height: 32rpx;
          margin-left: 20rpx;
        }
      }
      .monitor{
        display: flex;
        justify-content: space-between;
        font-size: 30rpx;
        padding: 0 30rpx;
        height: 80rpx;
        line-height: 80rpx;
        margin-top: 30rpx;
        background: #B2D7FD;
        border-radius: 10rpx;
        position: relative;
        .left{
          color: #007AFF;
          min-width: 470rpx;
        }
        .right{
          color: #007AFF;
          image{
            width: 15rpx;
            height: 25rpx;
            vertical-align: middle;
            margin-top: -4rpx;
            padding-left: 20rpx;
          }
        }
        .btn2{
          position: absolute;
          top: 0;
          left: 0;
          right: 0;
          bottom: 0;
          opacity: 0;
        }
      }
      .notHaveTip{
        background: #60CAA1;
        .left{
          color: #ffffff;
          display: flex;
          view{
            width: 600rpx;
            overflow: hidden;
            text-overflow:ellipsis;
            white-space: nowrap;
          }
          image{
             width: 32rpx;
            height: 32rpx;
            // vertical-align: middle;
            margin-right: 15rpx;
            margin-top: 24rpx;
            display: block;
          }
        }
      }
      .HaveTip{
        background: #F14B40;
        .left{
          color: #ffffff;
          display: flex;
          view{
            width: 600rpx;
            overflow: hidden;
            text-overflow:ellipsis;
            white-space: nowrap;
          }
          image{
             width: 32rpx;
            height: 32rpx;
            // vertical-align: middle;
            margin-right: 15rpx;
            margin-top: 24rpx;
            display: block;
          }
        }
      }
      .base{
        width: 100%;
        min-height: 160rpx;
        margin-top: 30rpx;
        border-radius: 10rpx;
        position: relative;
        .topH{
          font-size: 40rpx;
          font-weight: 900;
          padding: 24rpx 30rpx;
          padding-bottom: 18rpx;
          image{
            width: 80rpx;
            height: 30rpx;
            margin-left: 15rpx;
          }
        }
        .eg{
          image{
            width: 120rpx;
          }
        }
        .txt{
          padding: 0 30rpx;
          font-size: 30rpx;
          width: 600rpx;
          overflow: hidden;
          text-overflow:ellipsis;
          white-space: nowrap;
        }
        .btn2{
          position: absolute;
          top: 0;
          left: 0;
          right: 0;
          bottom: 0;
          opacity: 0;
        }
      }
      .learnState{
        background: #FFE288;
        .txt{
          color: #BA9A37;
        }
      }
      .learnAnalysis{
        background: #8DE6FF;
        .txt{
          color: #3B9CB7;
        }
      }
    }

  }
  // 关联结构
  .btm{
    width: 690rpx;
    height: auto;
    margin: 0 auto;
    margin-top: 200rpx;
    .txt1{
      width: 100%;
      text-align: center;
      font-size: 36rpx;
      height: 70rpx;
      font-weight: 900;
    }
    .txt2{
      width: 100%;
      text-align: center;
      font-size: 30rpx;
      height: 70rpx;
    }
    .btn{
      background: #007AFF;
      color: #ffffff;
      font-size: 32rpx;
      font-weight: 900;
      height: 90rpx;
      text-align: center;
      line-height: 90rpx;
      border-radius: 10rpx;
    }
  }
  .btmTipImg{
    width: 100%;
    height: 186rpx;
    position: fixed;
    bottom: 0;
    left: 0;
    image{
      width: 100%;
      height: 186rpx;
    }
    .btn2{
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      opacity: 0;
    }
  }
</style>
