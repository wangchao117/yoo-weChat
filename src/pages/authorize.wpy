<template>
  <view id="authorize">
    <image class="img" src="../static/symbol.png"/>
    <view class="p">需要您的授权才能继续使用</view>
    <button class="btn" open-type="getUserInfo" lang="zh_CN" bindgetuserinfo="onGotUserInfo">获取用户信息</button>
  </view>
</template>

<script>
  import wepy from 'wepy'
  export default class authorize extends wepy.page {
    config = {
      navigationBarTitleText: '悠数学-家长'
    }

    components = {}

    mixins = []

    data = {
      options: {},
      from: '',
      to: '',
      extra: ''
    }

    computed = {}

    methods = {
      async onGotUserInfo (res) {
        let isAuthorize = await this._getAuthorize()
        if (isAuthorize) {
          let checkToken = await this._checkToken()
          if (checkToken) {
            this._reLaunch()
          } else {
            this._login()
          }
        }
      }
    }
  
    // 判断用户是否授权
    _getAuthorize () {
      return new Promise((resolve, reject) => {
        wx.getSetting({
          success (res) {
            console.log('authorize.wpy --> _getAuthorize --> success')
            console.log(res)
            if (res.authSetting['scope.userInfo']) {
              resolve(true)
            } else {
              resolve(false)
            }
          }
        })
      })
    }

    events = {}

    onLoad (options) {
      this.options = options
      let extra = ''
      let isFirst = true
      for (const key in options) {
        if (key === 'from') {
          this.from = options['from']
        } else if (key === 'to') {
          this.to = options['to']
        } else {
          if (isFirst) {
            extra = `?${key}=${options[key]}`
            isFirst = false
          } else {
            extra = `${extra}&${key}=${options[key]}`
          }
        }
      }
      this.extra = extra
    }

    _login () {
      Promise.all([this._getCode(), this._getUserInfo()]).then((result) => {
        let code = result[0]
        let encryptedData = result[1].encryptedData
        let iv = result[1].iv
        let isSetToken = this._isSetToken(code, encryptedData, iv)
        if (isSetToken) {
          this._reLaunch()
        }
      })
    }

    _reLaunch () {
      console.log(`url = ${this.to || '/pages/index'}${this.extra}`)
      wx.reLaunch({
        url: `${this.to || '/pages/index'}${this.extra}`
      })
    }

    _getCode () {
      return new Promise((resolve, reject) => {
        wx.login({
          success (res) {
            console.log('authorize.wpy --> _getCode --> success')
            console.log(res)
            if (res.code) {
              resolve(res.code)
            } else {
              wx.showToast({icon: 'none', title: '登录失败', duration: 1400})
            }
          },
          fail (res) {
            console.log('authorize.wpy --> _getCode --> fail')
            console.log(res)
            wx.showToast({icon: 'none', title: '登录失败', duration: 1400})
          }
        })
      })
    }

    _getUserInfo () {
      return new Promise((resolve, reject) => {
        wx.getUserInfo({
          withCredentials: true,
          success (res) {
            console.log('authorize.wpy --> _getUserInfo --> success')
            console.log(res)
            resolve({encryptedData: res.encryptedData, iv: res.iv})
          },
          fail (res) {
            console.log('authorize.wpy --> _getUserInfo --> fail')
            console.log(res)
            wx.showToast({icon: 'none', title: '获取用户信息失败', duration: 1400})
          }
        })
      })
    }

    _checkToken () {
      return new Promise((resolve, reject) => {
        let token = wx.getStorageSync('token')
        if (token) {
          wx.request({
            url: `${this.$parent.globalData.baseURL}/wx/micro/parent/checkToken`,
            method: 'POST',
            header: {
              'Content-Type': 'application/x-www-form-urlencoded',
              'S_T': token
            },
            success (res) {
              console.log('authorize.wpy --> _checkToken --> success')
              console.log(res)
              if (res.data.ret_code !== 0) {
                resolve(true)
              } else {
                resolve(false)
              }
            },
            fail (res) {
              console.log('authorize.wpy --> _checkToken --> fail')
              console.log(res)
              resolve(false)
            }
          })
        } else {
          resolve(false)
        }
      })
    }

    async _isSetToken (code, encryptedData, iv) {
      let setTokoen = await this._setToken(code, encryptedData, iv)
      if (setTokoen) {
        return true
      } else {
        return false
      }
    }

    _setToken (code, encryptedData, iv) {
      return new Promise((resolve, reject) => {
        wx.request({
          url: `${this.$parent.globalData.baseURL}/wx/micro/parent/login`,
          method: 'POST',
          header: {
            'Content-Type': 'application/x-www-form-urlencoded'
          },
          data: {
            code: code,
            encryptedData: encryptedData,
            iv: iv
          },
          success (res) {
            console.log('authorize.wpy --> _setToken --> success')
            console.log(res)
            if (res.data.ret_code === 0) {
              wx.setStorageSync('token', res.data.ret.token)
              resolve(true)
            } else {
              wx.showToast({icon: 'none', title: '登陆失败', duration: 1400})
              resolve(false)
            }
          },
          fail (res) {
            console.log('authorize.wpy --> _setToken --> fail')
            console.log(res)
            wx.showToast({icon: 'none', title: '登陆失败', duration: 1400})
            resolve(false)
          }
        })
      })
    }
  }
</script>
<style lang="scss" scoped>
#authorize{
  height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  .img{
    margin:  -200rpx 0 0;
    display: block;
    width: 200rpx;
    height: 200rpx;
  }
  .p{
    color: #000000;
    font-size: 40rpx;
    font-weight: bold;
    margin: 80rpx 0 120rpx;
  }
  .btn{
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 30rpx;
    color: #ffffff;
    font-weight: bold;
    margin: 0 30rpx;
    width: 690rpx;
    height: 90rpx;
    background:#007aff;
    border-radius: 10rpx;
  }
  button::after{
    border:none;
  }
}
</style>
