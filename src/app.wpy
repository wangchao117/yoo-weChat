<style lang="less">
.container {
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: space-between;
  box-sizing: border-box;
}
</style>

<script>
import wepy from 'wepy'
import 'wepy-async-function'

import { setStore } from 'wepy-redux'
import configStore from './store'
import mta from './utils/mta_analysis.js'

const store = configStore()
setStore(store)

export default class extends wepy.app {
  config = {
    pages: [
      'pages/index',
      'pages/shareAct/introduction',
      'pages/shareAct/home',
      'pages/shareAct/only-once',
      'pages/shareAct/end',
      'pages/work-report',
      'pages/join-trend',
      'pages/honor-rank',
      'pages/analysis',
      'pages/not-join-trend',
      'pages/report-detail',
      'pages/associated-account',
      'pages/user',
      'pages/verify-account',
      'pages/download-homework',
      'pages/download-homework-workflow',
      'pages/download-homework-disabled',
      'pages/authorizeIdx',
      'pages/child-input',
      'pages/protocol',
      'pages/warn',
      'pages/authorize',
      'pages/pay',
      'pages/vip-learn-club',
      'pages/pay-success',
      'pages/web-view'
    ],
    window: {
      backgroundTextStyle: 'light',
      navigationBarBackgroundColor: '#fff',
      navigationBarTitleText: '悠数学-家长',
      navigationBarTextStyle: 'black'
    },
    tabBar: {
      selectedColor: '#007AFF',
      list: [{
        pagePath: 'pages/index',
        iconPath: 'static/icon-home.png',
        selectedIconPath: 'static/icon-home-selected.png',
        text: '首页'
      }, {
        pagePath: 'pages/vip-learn-club',
        iconPath: 'static/icon-vip.png',
        selectedIconPath: 'static/icon-vip-selected.png',
        text: 'VIP培优'
      }, {
        pagePath: 'pages/user',
        iconPath: 'static/icon-mine.png',
        selectedIconPath: 'static/icon-mine-selected.png',
        text: '我'
      }]
    }
  }

  globalData = {
    // 配置
    // 正式
    // baseURL: 'https://wx.yoomath.com',
    // h5URL: 'https://h5.yoomath.com',
    // 测试
    // baseURL: 'http://192.168.66.70:80', // 于鹏程
    // baseURL: 'http://192.168.66.69:80', // 龙哥
    // baseURL: 'http://192.168.66.134:8080', // 赵鹏
    // release
    // baseURL: 'http://wx.test.yoomath.com',
    // h5URL: 'http://h5.test.yoomath.com',
    // test1
    baseURL: 'http://wx.test1.yoomath.com',
    h5URL: 'http://h5.test1.yoomath.com',
    // test2
    // baseURL: 'http://wx.test2.yoomath.com',
    // h5URL: 'http://h5.test2.yoomath.com',
    // preview
    // baseURL: 'http://wx.preview.yoomath.com',
    // h5URL: 'http://h5.preview.yoomath.com',
    // hotfix
    // baseURL: 'http://wx.hotfix.yoomath.com',
    // h5URL: 'http://h5.hotfix.yoomath.com',
    mtaAanalysis: false, // 开启移动分析埋点
    // 状态
    // wepy.$instance.globalData
    hasAuthorize: false,
    hasCheckToken: false,
    childName: '',
    childNickName: '',
    userInfoAll: '',
    childViaSrc: '../static/baseVia.png',
    hasBind: false,
    hasJoin: false,
    expirationDate: '',
    serviceTel: '',
    isIOS: false,
    hasGetSystemInfo: false,
    // 其他
    webViewSrc: '',
    observer: this._observer()
  }

  _observer () {
    let _msg = {}
    return {
      regist (type, fn) {
        if (_msg[type]) {
          _msg[type].push(fn)
        } else {
          _msg[type] = [fn]
        }
      },
      fire (type, args) {
        if (!_msg[type]) return
        var events = {
          type: type,
          args: args || {}
        }
        var i = 0
        var len = _msg[type].length
        for (; i < len; i++) {
          _msg[type][i].call(this, events)
        }
      },
      remove (type, fn) {
        if (_msg[type] instanceof Array) {
          let i = _msg[type].length - 1
          for (; i >= 0; i--) {
            _msg[type][i] === fn && _msg[type].splice(i, 1)
          }
        }
      },
      clear (type) {
        _msg[type] = null
      }
    }
  }

  constructor () {
    super()
    this.use('requestfix')
  }

  async _login (cb) {
    wepy.showLoading({title: '正在获取数据'})
    let code = await this._getCode()
    let {encryptedData, iv} = await this._getUserInfo()
    await this._setToken(code, encryptedData, iv)
    wepy.hideLoading()
    cb && cb()
    // this._setToken(code, encryptedData, iv, cb)
  }

  // 是否跳转到绑定页面
  _decideToBindAfterLaunch (cb) {
    this._onLaunch(async () => {
      let hasBind = await wepy.$instance._getBindStatus()
      if (!hasBind) {
        wepy.navigateTo({
          url: '/pages/associated-account'
        })
      } else {
        cb && cb()
      }
    })
  }

  // 判断用户是否授权
  _getAuthorize () {
    return new Promise((resolve, reject) => {
      wepy.getSetting({
        success (res) {
          console.log('app.wpy --> _getAuthorize --> success')
          console.log(res)
          if (res.authSetting['scope.userInfo']) {
            resolve(true)
          } else {
            resolve(false)
          }
        }
      })
    })
  }

  _getCode () {
    console.log()
    return new Promise((resolve, reject) => {
      wepy.login({
        success (res) {
          console.log('app.wpy --> _getCode --> success')
          console.log(res)
          if (res.code) {
            resolve(res.code)
          } else {
            wepy.showToast({icon: 'none', title: res.data.ret_msg, duration: 1400})
          }
        },
        fail (res) {
          console.log('app.wpy --> _getCode --> fail')
          console.log(res)
          wepy.showToast({icon: 'none', title: '获取用户code失败', duration: 1400})
        }
      })
    })
  }

  _getUserInfo () {
    return new Promise((resolve, reject) => {
      wepy.getUserInfo({
        withCredentials: true,
        success (res) {
          console.log('app.wpy --> _getUserInfo --> success')
          console.log(res)
          resolve({encryptedData: res.encryptedData, iv: res.iv})
        },
        fail (res) {
          console.log('app.wpy --> _getUserInfo --> fail')
          console.log(res)
          wepy.showToast({icon: 'none', title: '获取用户信息失败', duration: 1400})
        }
      })
    })
  }

  _checkToken () {
    return new Promise((resolve, reject) => {
      let token = wepy.getStorageSync('token')
      if (token) {
        wepy.request({
          url: `${wepy.$instance.globalData.baseURL}/wx/micro/parent/checkToken`,
          method: 'POST',
          header: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'S_T': token
          },
          success (res) {
            console.log('app.wpy --> _checkToken --> success')
            console.log(res)
            if (res.data.ret_code === 0) {
              resolve(true)
            } else {
              resolve(false)
            }
          },
          fail (res) {
            console.log('app.wpy --> _checkToken --> fail')
            console.log(res)
            resolve(false)
          }
        })
      } else {
        resolve(false)
      }
    })
  }

  _setToken (code, encryptedData, iv, cb) {
    return new Promise((resolve, reject) => {
      wepy.request({
        url: `${wepy.$instance.globalData.baseURL}/wx/micro/parent/login`,
        method: 'POST',
        header: {
          'Content-Type': 'application/x-www-form-urlencoded'
        },
        data: {
          code: code,
          encryptedData: encryptedData,
          iv: iv
        },
        success (res) {
          console.log('app.wpy --> _setToken --> success')
          console.log(res)
          if (res.data.ret_code === 0) {
            wepy.setStorageSync('token', res.data.ret.token)
          } else {
            wepy.showToast({icon: 'none', title: '请求失败', duration: 1400})
          }
          wepy.hideLoading()
          wepy.$instance.globalData.hasCheckToken = true
          resolve(true)
          // that.$apply()
          // cb && cb()
        },
        fail (res) {
          console.log('app.wpy --> _setToken --> fail')
          console.log(res)
          wepy.showToast({icon: 'none', title: '请求失败', duration: 1400})
          wepy.hideLoading()
          wepy.$instance.globalData.hasCheckToken = true
          // that.$apply()
          reject(new Error('请求fail'))
        }
      })
    })
  }

  // 获取电话号码
  _getTel () {
    // let that = this
    wepy.request({
      url: `${wepy.$instance.globalData.baseURL}/wx/micro/parent/user/userCenter`,
      method: 'POST',
      header: {
        'Content-Type': 'application/x-www-form-urlencoded'
      },
      success (res) {
        console.log('app.wpy --> _getTel --> success')
        console.log(res)
        if (res.data.ret_code === 0) {
          wepy.$instance.globalData.serviceTel = res.data.ret.customerTel1
        }
      }
    })
  }

  // 获取操作系统
  _getSystemInfo () {
    // let that = this
    wepy.getSystemInfo({
      success (res) {
        console.log('vip-learn-club.wpy --> _getSystemInfo --> success')
        console.log(res)
        wepy.$instance.globalData.hasGetSystemInfo = true
        if (res.system.toLowerCase().includes('ios')) {
          wepy.$instance.globalData.isIOS = true
        }
      },
      fail (res) {
        console.log('vip-learn-club.wpy --> _getSystemInfo --> fail')
        console.log(res)
        wepy.showToast({icon: 'none', title: '获取用户信息失败', duration: 1400})
      }
    })
  }

  // 获取绑定状态
  _getBindStatus () {
    return new Promise((resolve, reject) => {
      wepy.request({
        url: `${wepy.$instance.globalData.baseURL}/wx/micro/parent/hasBind`,
        method: 'POST',
        header: {
          'Content-Type': 'application/x-www-form-urlencoded',
          'S_T': wepy.getStorageSync('token')
        },
        success (res) {
          console.log('app.wpy --> _getBindStatus --> success')
          console.log(res)
          if (res.data.ret_code === 0) {
            resolve(res.data.ret.hasBind)
          } else {
            wepy.showToast({icon: 'none', title: res.data.ret_msg, duration: 1400})
            reject(new Error('请求success，但ret_code不为0'))
          }
        },
        fail (res) {
          console.log('app.wpy --> _getBindStatus --> fail')
          console.log(res)
          wepy.showToast({icon: 'none', title: '请求失败', duration: 1400})
          reject(new Error('请求fail'))
        }
      })
    })
  }

  async _onLaunch (cb) {
    let that = this
    wepy.$instance.globalData.hasAuthorize = await that._getAuthorize()
    if (wepy.$instance.globalData.hasAuthorize) {
      let checkToken = await that._checkToken()
      if (!checkToken) {
        await that._login()
      } else {
        wepy.$instance.globalData.hasCheckToken = true
        // 存全局个人信息
        wepy.getUserInfo({
          success (res) {
            // console.log('存全局个人信息')
            wepy.$instance.globalData.userInfoAll = res.userInfo
          },
          fail (res) {
            wepy.showToast({icon: 'none', title: '获取用户信息失败', duration: 1400})
          }
        })
      }
      cb && cb()
    }
  }

  onLaunch(options) {
    console.log('app.wpy --> onLaunch')
    console.log(options)
    if (wepy.$instance.globalData.mtaAanalysis) {
      mta.App.init({
        'appID': '500627072',
        'eventID': '500627074',
        'statPullDownFresh': true,
        'statShareApp': true,
        'statReachBottom': true
      })
    }
    this._getTel()
    this._getSystemInfo()
    this._onLaunch()
  }
}
</script>
