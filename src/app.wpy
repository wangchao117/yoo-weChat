<style lang="less">
.container {
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: space-between;
  box-sizing: border-box;
}
</style>

<script>
import wepy from 'wepy'
import 'wepy-async-function'

import { setStore } from 'wepy-redux'
import configStore from './store'

const store = configStore()
setStore(store)

export default class extends wepy.app {
  config = {
    pages: [
      'pages/index',
      'pages/authorize',
      'pages/pay',
      'pages/protocol',
      'pages/analysis',
      'pages/join-trend',
      'pages/vip-learn-club',
      'pages/pay-success',
      'pages/pay-ios',
      'pages/report-detail',
      'pages/honor-rank',
      'pages/not-join-trend',
      'pages/work-report',
      'pages/warn',
      'pages/child-input',
      'pages/user',
      'pages/down-app'
    ],
    window: {
      backgroundTextStyle: 'light',
      navigationBarBackgroundColor: '#fff',
      navigationBarTitleText: '悠数学-家长',
      navigationBarTextStyle: 'black'
    },
    tabBar: {
      selectedColor: '#007AFF',
      list: [{
        pagePath: 'pages/index',
        iconPath: 'static/icon-home.png',
        selectedIconPath: 'static/icon-home-selected.png',
        text: '首页'
      }, {
        pagePath: 'pages/vip-learn-club',
        iconPath: 'static/icon-vip.png',
        selectedIconPath: 'static/icon-vip-selected.png',
        text: 'VIP培优'
      }, {
        pagePath: 'pages/user',
        iconPath: 'static/icon-mine.png',
        selectedIconPath: 'static/icon-mine-selected.png',
        text: '我'
      }]
    }
  }

  globalData = {
    userCode: 'userCode',
    baseURL: 'http://gw2310102019.xicp.net',
    isAuthorize: false,
    userInfo: null
  }

  constructor () {
    super()
    this.use('requestfix')
  }

  async onLaunch() {
    console.log('app.wpy --> onLaunch')
    // 在这获取状态,个人信息
    this.testAsync()
    let isAuthorize = await this._getAuthorize()
    if (isAuthorize) {
      let checkToken = await this._checkToken()
      if (!checkToken) {
        this._login()
      }
    } else {
      wx.redirectTo({
        url: `/pages/authorize?from=/pages/app&to=/pages/index&id=123435&abc=1`
      })
    }
  }

  _login () {
    Promise.all([this._getCode(), this._getUserInfo()]).then((result) => {
      let code = result[0]
      let encryptedData = result[1].encryptedData
      let iv = result[1].iv
      this._setToken(code, encryptedData, iv)
    })
  }

  // 判断用户是否授权
  _getAuthorize () {
    return new Promise((resolve, reject) => {
      wx.getSetting({
        success (res) {
          console.log('app.wpy --> _getAuthorize --> success')
          console.log(res)
          if (res.authSetting['scope.userInfo']) {
            resolve(true)
          } else {
            resolve(false)
          }
        }
      })
    })
  }

  _getCode () {
    return new Promise((resolve, reject) => {
      wx.login({
        success (res) {
          console.log('app.wpy --> _getCode --> success')
          console.log(res)
          if (res.code) {
            resolve(res.code)
          } else {
            wx.showToast({icon: 'none', title: '登录失败', duration: 1400})
          }
        },
        fail (res) {
          console.log('app.wpy --> _getCode --> fail')
          console.log(res)
          wx.showToast({icon: 'none', title: '登录失败', duration: 1400})
        }
      })
    })
  }

  _getUserInfo () {
    return new Promise((resolve, reject) => {
      wx.getUserInfo({
        withCredentials: true,
        success (res) {
          console.log('app.wpy --> _getUserInfo --> success')
          console.log(res)
          resolve({encryptedData: res.encryptedData, iv: res.iv})
        },
        fail (res) {
          console.log('app.wpy --> _getUserInfo --> fail')
          console.log(res)
          wx.showToast({icon: 'none', title: '获取用户信息失败', duration: 1400})
        }
      })
    })
  }

  _checkToken () {
    return new Promise((resolve, reject) => {
      let token = wx.getStorageSync('token')
      if (token) {
        wx.request({
          url: `${this.globalData.baseURL}/wx/micro/parent/checkToken`,
          method: 'POST',
          header: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'S_T': token
          },
          success (res) {
            console.log('app.wpy --> _checkToken --> success')
            console.log(res)
            if (res.data.ret_code === 0) {
              resolve(true)
            } else {
              resolve(false)
            }
          },
          fail (res) {
            console.log('app.wpy --> _checkToken --> fail')
            console.log(res)
            resolve(false)
          }
        })
      } else {
        resolve(false)
      }
    })
  }

  _setToken (code, encryptedData, iv) {
    wx.request({
      url: `${this.globalData.baseURL}/wx/micro/parent/login`,
      method: 'POST',
      header: {
        'Content-Type': 'application/x-www-form-urlencoded'
      },
      data: {
        code: code,
        encryptedData: encryptedData,
        iv: iv
      },
      success (res) {
        console.log('app.wpy --> _setToken --> success')
        console.log(res)
        if (res.data.ret_code === 0) {
          wx.setStorageSync('token', res.data.ret.token)
        } else {
          wx.showToast({icon: 'none', title: '登陆失败', duration: 1400})
        }
      },
      fail (res) {
        console.log('app.wpy --> _setToken --> fail')
        console.log(res)
        wx.showToast({icon: 'none', title: '登陆失败', duration: 1400})
      }
    })
  }

  sleep (s) {
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        resolve('promise resolved')
      }, s * 1000)
    })
  }

  async testAsync () {
    const data = await this.sleep(3)
    console.log(data)
  }

  getUserInfo(cb) {
    const that = this
    if (this.globalData.userInfo) {
      return this.globalData.userInfo
    }
    wx.getUserInfo({
      success (res) {
        that.globalData.userInfo = res.userInfo
        cb && cb(res.userInfo)
      }
    })
  }
}
</script>
